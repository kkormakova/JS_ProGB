// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.
// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:
// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }
// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

const albums = [
    {title: "FACE", artist: "Jimin", year: "2023"},
    {title: "D-DAY", artist: "Agust D", year: "2022"},
    {title: "GUTS", artist: "Olivia Rodrigo", year: "2020"},
]
const musicCollection = {
    albums: [...albums],
    [Symbol.iterator]: function () {
        let index = 0;
        return {
            next: () => {
                if (index < albums.length) {
                    return {value: this.albums[index++], done: false};
                } else {
                    return {done: true};
                }
            }
        }
    }
}

for (const album of musicCollection) {
    console.log(`${album.title} - ${album.artist}(${album.year})`);
}

// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.
// Необходимо создать систему управления этими заказами, которая позволит:
// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.
// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.
// Повара и их специализации:
// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.
// Блюда и их повара:
// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.
// Заказы:
// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.
//Map: блюда => название: повар

let dishes = new Map();
dishes.set("Маргарита", "Виктор");
dishes.set("Пепперони", "Виктор");
dishes.set("Филадельфия", "Ольга");
dishes.set("Калифорния", "Ольга");
dishes.set("Тирамису", "Дмитрий");
dishes.set("Чизкейк", "Дмитрий");

// Map: заказы => клиент: Set(блюда)
let orders = new Map();
const alex = {name: "Алексей"};
const alexOrder = new Set(["Пепперони", "Тирамису"]);
orders.set(alex, alexOrder);
const mary = {name: "Мария"};
const maryOrder = new Set(["Калифорния", "Маргарита"]);
orders.set(mary, maryOrder);
const irina = {name: "Ирина"};
const irinaOrder = new Set("Чизкейк");
orders.set(irina, irinaOrder);
console.log(`Клиент Мария заказала ${[...orders.get(mary)]}`);
console.log(`"Тирамису" готовит повар ${dishes.get("Тирамису")}`);